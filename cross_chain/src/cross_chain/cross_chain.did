type Result = variant {
    Ok : bool;
    Err : ApiError;
};

type ApiError = variant {
    Unauthorized;
    NotValidator;
    AlreadyRegisterLocker;
    AlreadyRegisterValidator;
    ExecuteMessageFailed;
    Other;
};

type Message = record {
    from_chain : text;
    to_chain : text;
    sender : text;
    signer : text;
    sqos : Sqos;
    content : Content;
    session : Session;
};

type Sqos = record {
    reveal : nat8;
};

type Content = record {
    contract : text;
    action : text;
    data : text;
};

type Session = record {
    res_type : nat8;
    id : nat64;
};

type MapKey = variant {
    MessageId : record {
        chain_name : text;
        id : nat64;
    };
    ValidatorFinalReceivedId : record {
        chain_name : text;
        validator : principal;
    };
};

type PendingMessage = record {
    message: Message;
    validators: vec principal;
};

service : {
    "registerLocker": (principal) -> (Result);
    "registerValidator": (principal) -> (Result);
    "unRegisterValidator": (principal) -> (Result);
    "receiveMessage": (nat64, Message) -> (Result);
    "executeMessage": (text, nat64) -> (Result);
    "sendMessage": (text, Content, Session) -> ();
    "getPendingMessage": () -> (vec record {MapKey; vec record {text; PendingMessage}}) query;
    "getExecutableMessage": () -> (vec record {MapKey; Message}) query;
    "getSentMessage": () -> (vec record {MapKey; Message}) query;
    "getSentMessageById": (text, nat64) -> (Message) query;
    "getSentMessageCount": (text) -> (nat64) query;
    "getFinalReceivedMessageId": (text, principal) -> (nat64) query;
    "getMsgPortingTask": (text, principal) -> (nat64) query;
    "getLatestMessageId": (text) -> (nat64) query;
    "getLockers": () -> (vec principal) query;
    "getCustodians": () -> (vec principal) query;
    "getValidators": () -> (vec principal) query;
    "clearReceivedMessage": (vec text) -> (Result);
    "clearSentMessage": (vec text) -> (Result);
}
